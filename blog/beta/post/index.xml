<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on james&#39;s web log</title>
    <link>https://kazimuth.github.io/blog/beta/post/</link>
    <description>Recent content in Posts on james&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jul 2023 18:14:54 -0400</lastBuildDate><atom:link href="https://kazimuth.github.io/blog/beta/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Visualizing Functions and Relations, Part 1</title>
      <link>https://kazimuth.github.io/blog/beta/post/functions-and-relations/</link>
      <pubDate>Mon, 24 Jul 2023 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/beta/post/functions-and-relations/</guid>
      
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;!--
&gt; The universe is not veiled; all its activities lie open.
&gt;
&gt; &amp;emsp; &amp;mdash; [圓悟克勤](https://en.wikipedia.org/wiki/Yuanwu_Keqin)
--&gt;
&lt;p&gt;Many people seem to think that math is boring, unpleasant, and difficult to understand. These people are right; but I wish they weren&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to understand that math is &lt;em&gt;basically&lt;/em&gt; just a pen-and-paper board game, like dungeons and dragons. The rules of math are carefully designed to simulate the real world. It&amp;rsquo;s not magic.&lt;/p&gt;
&lt;p&gt;But math isn&amp;rsquo;t taught this way. It&amp;rsquo;s taught as an strict and arcane collection of rules that have to be memorized, on pain of bad test scores. Not much time is spent helping students understand &lt;em&gt;why&lt;/em&gt; we choose these rules. A number of people are trying to change this (&lt;a href=&#34;https://betterexplained.com/about/&#34;&gt;[1]&lt;/a&gt; &lt;a href=&#34;https://graphicallinearalgebra.net/&#34;&gt;[2]&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@3blue1brown?app=desktop&#34;&gt;[3]&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@Vihart/videos&#34;&gt;[4]&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=jvPPXbo87ds&#34;&gt;[5]&lt;/a&gt;). There&amp;rsquo;s a growing wave of math resources focusing on intuitive, sensory engagement with math.&lt;/p&gt;
&lt;p&gt;I think resources like this are especially needed for modern pure math. For about a century, the style in professional math has been:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no pictures in publications&lt;/li&gt;
&lt;li&gt;all notation as concise and abstract as possible&lt;/li&gt;
&lt;li&gt;use as many fancy tricks to describe your problem as you can think of&lt;/li&gt;
&lt;li&gt;leave as much unsaid as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes pure math seem much scarier than it really is. I want to make it friendlier.&lt;/p&gt;
&lt;p&gt;This series will be an introduction to some important playing pieces in pure math: functions and relations. My overall goal is to convince you that functions look like this:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;A diagram with some purple balls on the left and orange squares on the right. The balls and squares are grouped into highlighted regions. Each region contains multiple balls, but only one square. All balls are contained in a region, but some squares are on their own.&#34; src=&#34;assets/Functions.drawio.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll get an intuitive understanding of what this means, and learn how to &lt;em&gt;prove&lt;/em&gt; it &amp;ndash; how to use it as a strategy in the game of formal math, if a pro mathematician challenges you to a duel.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin.&lt;/p&gt;
&lt;h2 id=&#34;whats-a-relation&#34;&gt;What&amp;rsquo;s a relation?&lt;/h2&gt;
&lt;p&gt;First, we need to define our playing pieces. The most basic piece we&amp;rsquo;ll use is called a &lt;em&gt;binary relation&lt;/em&gt;. Before we start writing out equations and strict mathematical rules, let&amp;rsquo;s try to get a general sense of what a binary relation looks like. There are multiple ways to draw them, but they&amp;rsquo;re all connected.&lt;/p&gt;
&lt;h3 id=&#34;diagram-type-one-directed-graphs&#34;&gt;Diagram type one: Directed Graphs&lt;/h3&gt;
&lt;p&gt;My favorite way to draw binary relations is as &lt;em&gt;directed graphs&lt;/em&gt;, or &lt;em&gt;digraphs&lt;/em&gt;, which look like this:&lt;/p&gt;
&lt;!-- SCALE: drawio 1in -&gt; 108pt --&gt; 
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;Circles labeled 1,2,3,4. There are arrows going 1 to 2, 1 to 3, 3 to 4, 4 to 1&#34; src=&#34;assets/R_Graph1.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;A digraph is a collection of &lt;em&gt;nodes&lt;/em&gt; &amp;ndash; labeled circles &amp;ndash; and a collection of &lt;em&gt;edges&lt;/em&gt; &amp;ndash; little arrows going between the nodes. We can model all sorts of situations with digraphs. For instance, a family tree can be represented as a digraph. We draw a node for each name and then draw arrows from parents to children:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;Circles labeled Cindy,Felix,Ray,Eileen,Rob,Louise,Jim,Mac. There are arrows going Cindy to Rob, Felix to Rob, Ray to Louise, Eileen to Louise, Rob to Jim, Rob to Mac, Louise to Jim, Louise to Mac&#34; width=&#34;432pt&#34; src=&#34;assets/Family_Digraph_1.svg&#34;&gt;
&lt;/div&gt;
&lt;p&gt;We can also draw digraphs of love triangles, by drawing edges from people to people they like:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Love Triangles.drawio.svg&#34; width=&#34;756pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Notice that nodes are allowed to have edges to themselves. Also, nodes don&amp;rsquo;t have to have any edges. In the &amp;ldquo;Romantic Comedy&amp;rdquo; example, C is a sidekick who&amp;rsquo;s not interested in A or B.&lt;/p&gt;
&lt;p&gt;We can draw a digraph of which classes use which books in a school:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Regular_Arrows.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Notice how this digraph is divided into two parts &amp;ndash; the classes and the books. All the edges go from classes to books. Graphs like this are called &amp;ldquo;bipartite&amp;rdquo;, which means &amp;ldquo;two parts&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t have to use arrows to draw digraphs. We can use any shape we want, as long as the ends look different. For instance, we could use different colored circles:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Or even add text labels:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows_2.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I like this because it&amp;rsquo;s very clear what the edges mean. It&amp;rsquo;s a lot of work to add all the labels though.
We can compromise by adding a legend:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows_Legend.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Now that we&amp;rsquo;ve added legends, it&amp;rsquo;s very easy to convert to our next way to draw relations: tables.&lt;/p&gt;
&lt;h3 id=&#34;diagram-type-two-two-column-tables&#34;&gt;Diagram Type Two: Two-Column Tables&lt;/h3&gt;
&lt;p&gt;Here is the Classes-Books relation, redrawn as a two-column table. We use the labels from the legend as column titles.&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;class&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;book&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Math 203&lt;/td&gt;&lt;td&gt;The Calculus Reader&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Astronomy 101&lt;/td&gt;&lt;td&gt;The Planetary System&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This is less exciting, but more orderly.&lt;/p&gt;
&lt;p&gt;We can also convert our other graphs into tables. For instance we can take the &amp;ldquo;Coveting&amp;rdquo; graph from before, add a legend, and convert it to a table:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Coveting_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Look at this for a minute to make sure you understand the translation.
If it helps, you can compare the &amp;ldquo;Pining&amp;rdquo; graph:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In digraphs, we indicate the direction of a relationship with arrowheads (or colored circles). In tables, we indicate the direction of a relationship with the ordering of columns within a row.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s one more way to draw relations&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;diagram-type-three-2d-plots&#34;&gt;Diagram Type Three: 2D Plots&lt;/h3&gt;
&lt;p&gt;This diagram type makes better use of 2D space. Here&amp;rsquo;s the Coveting relation again, now drawn as a 2D plot:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Coveting_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;liker&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;And here&amp;rsquo;s Pining:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;liker&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This new format kind of looks like a multiplication table, or like an x-y plot. We fill in a box if the person in that column likes the person in that row.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s apply this to our classes-books relation:&lt;/p&gt;
&lt;div class=&#34;center-sequence-column&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Classes_Multi_Arrows_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;550pt&#34; height=&#34;440pt&#34;&gt;
&lt;table class=&#34;twodplot small&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;4&#34; class=&#34;right&#34;&gt;book&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;Hamlet&lt;/th&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;Moby Dick&lt;/th&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;The Calculus Reader&lt;/th&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;The Planetary System&lt;/th&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;
                &lt;th class=&#34;left&#34;&gt;English Lit 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Whaling 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Math 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Astronomy 101&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;4&#34;&gt;class&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;(We&amp;rsquo;ve used a trick here to take up less space. Because the class-books relation is bipartite &amp;ndash; split into classes and books &amp;ndash; we can put only classes on the bottom, and only books on the side. For relations that aren&amp;rsquo;t split up like that, you have to put ALL the nodes on both sides.)&lt;/p&gt;
&lt;h2 id=&#34;equivalent-diagrams&#34;&gt;Equivalent diagrams&lt;/h2&gt;
&lt;p&gt;We now have three types of diagrams: digraphs, two column tables, and plots.&lt;/p&gt;
&lt;p&gt;I want to convince you that these types of diagrams are &lt;em&gt;equivalent&lt;/em&gt;: you can convert between them as needed, without losing information.&lt;/p&gt;
&lt;p&gt;To convince each other of things, mathematicians write proofs. A &amp;ldquo;proof&amp;rdquo; is a sequence of moves in a board game. The basic moves in the board game are supposed to be so simple that everybody agrees they should be allowed. Bigger, more complicated moves are built up out of simple moves. (In this case, the moves would be things like converting between diagrams.)&lt;/p&gt;
&lt;p&gt;Sadly, I can&amp;rsquo;t prove anything yet. I haven&amp;rsquo;t explained any of the basic moves! We&amp;rsquo;ll get to that over the next couple posts. I still want to &lt;em&gt;convince&lt;/em&gt; you though. Mathematicians have a classic trick for this:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Leave it as an exercise!&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h4 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h4&gt;
&lt;p&gt;I want to convince you that digraphs and 2D Plots contain the same information. This means that if we start with a digraph, convert it to a plot, and then convert back, we should end up back where we started.&lt;/p&gt;
&lt;p&gt;Get a piece of paper. Divide it into three equal-sized boxes, arranged left to right.&lt;/p&gt;
&lt;p&gt;In the left-most box, draw a digraph. Any digraph you like! (If you can&amp;rsquo;t think of one, draw a small bit of your family tree, like above.) Make sure you add a legend.&lt;/p&gt;
&lt;p&gt;Convert your diagram to a 2d plot in the middle box. Your starting diagram should look something like the left here, and the middle diagram should look something like the right:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
    &lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;liker&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Now, fold your paper over so that you CAN&amp;rsquo;T SEE the digraph you started from. In fact, try to forget where you started from entirely. If you&amp;rsquo;re following along with a friend, trade papers with them at this point.&lt;/p&gt;
&lt;p&gt;Now, convert the plot on your paper back into a digraph. This should look something like this:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;liker&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
    &lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend_Mutant.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Remember the legend!&lt;/p&gt;
&lt;p&gt;Now we can check if we&amp;rsquo;ve ended up in the same place as we started. Unfold your paper. Check if the starting digraph is the same as the ending digraph.&lt;/p&gt;
&lt;p&gt;(Two digraphs are considered to be &amp;ldquo;the same&amp;rdquo; if they have the same nodes and the same connections, even if the nodes are arranged differently. We&amp;rsquo;ll talk more about this in a bit.)&lt;/p&gt;
&lt;p&gt;If the start and end of your paper are the same, great. If not, OH NO! You&amp;rsquo;ve proved me wrong!!!&lt;/p&gt;
&lt;h4 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s a second reason we can&amp;rsquo;t prove that tables, plots, and digraphs are all equivalent. It&amp;rsquo;s because that&amp;rsquo;s&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;A COMPLETE LIE!&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Specifically, our tables are missing some information right now. To see what I mean, flip your paper over. Draw another small digraph in the leftmost box. Add a node to your digraph that has no edges touching it.&lt;/p&gt;
&lt;p&gt;Convert your digraph to a table:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Fold the paper again, and remembering that you don&amp;rsquo;t know what the original digraph looked like, convert the table back into a digraph.&lt;/p&gt;
&lt;p&gt;Do you see the issue?&lt;/p&gt;
&lt;p&gt;If not, here&amp;rsquo;s a hint. This is what I get when I do this exercise:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
    &lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Bug.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;The issue is that our tables remember what edges are there, but not what nodes are there. In my example, the node C has no edges, so it doesn&amp;rsquo;t show up in the table at all.&lt;/p&gt;
&lt;p&gt;Notice how this issue doesn&amp;rsquo;t show up for digraphs or plots, only tables:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;liker&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;To fix this, we need to add information to our tables to make clear which nodes are &lt;em&gt;possible&lt;/em&gt; in each column, even if they aren&amp;rsquo;t actually there.
Something like this:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker: Person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&amp;ldquo;liker: Person&amp;rdquo; means that every entry in the column &amp;ldquo;liker&amp;rdquo; has to come from the table &amp;ldquo;Person&amp;rdquo;. A mathematician would say:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Every liker is an element of the set Person.&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Or, if they&amp;rsquo;re trendy:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Every liker is of type Person.&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the same idea, applied to our other running example:&lt;/p&gt;
&lt;div class=&#34;center-sequence-column&#34;&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;class: Class&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;book: Book&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Math 203&lt;/td&gt;&lt;td&gt;The Calculus Reader&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Astronomy 101&lt;/td&gt;&lt;td&gt;The Planetary System&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;Class&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Math 203&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Astronomy 101&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;Book&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;The Calculus Reader&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;The Planetary System&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how the columns have different types. What property does this correspond to?&lt;/p&gt;
&lt;p&gt;(Remark: the real world isn&amp;rsquo;t neatly divided into &amp;ldquo;types&amp;rdquo; like this. They&amp;rsquo;re just an organizational tool.)&lt;/p&gt;
&lt;h2 id=&#34;equality--stretchiness&#34;&gt;Equality &amp;amp; Stretchiness&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s one more thing I want to cover in this post. Before, I said that two digraphs are considered to be &amp;ldquo;the same&amp;rdquo; if they have the same nodes and the same connections, even if the nodes are arranged differently.&lt;/p&gt;
&lt;p&gt;A more intuitive way to explain this is to say that:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Digraphs are stretchy.&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So for instance, we would consider these three digraphs to be the same, because we can rearrange and stretch them into each other:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Same.drawio.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;To write down that two things are the same, we put an equals sign between them:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Equal.drawio.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(We could also use a three-directional equal sign:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Threeary_Equal.drawio.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;But we haven&amp;rsquo;t talked about ternary relations yet.)&lt;/p&gt;
&lt;p&gt;It might seem a little strange to put an equals sign between things that aren&amp;rsquo;t &lt;em&gt;exactly&lt;/em&gt; the same. But we actually do this all the time in math. Consider the equation:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;p class=&#34;big&#34;&gt;1 + 1&lt;/p&gt;&lt;div class=&#34;center-sequence-fence-post&#34;&gt;=&lt;/div&gt;&lt;p class=&#34;big&#34;&gt;2&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The things on either side of the equal sign here aren&amp;rsquo;t exactly the same &amp;ndash; they&amp;rsquo;re just &lt;em&gt;the same enough for our purposes&lt;/em&gt;. You could also think of them as &lt;em&gt;different ways to accomplish the same thing.&lt;/em&gt; To get a &amp;ldquo;2&amp;rdquo;, you can take two &amp;ldquo;1&amp;quot;s and add them together, or you can just write down a &amp;ldquo;2&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In the case of our digraphs, we consider the above diagrams to be &lt;em&gt;different ways to draw the same digraph&lt;/em&gt;. Since the digraph is stretchy, it doesn&amp;rsquo;t matter how it&amp;rsquo;s laid out in space.&lt;/p&gt;
&lt;p&gt;We can come up with similar rules for our other diagram types. For example, I declare that our tables are unordered: we agree not to care about the order of the rows. So we can write:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker: Person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;=&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;liker: Person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;. Come up with two 2D plots that look different, but convey the same information. Write an equals sign between them.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So far we&amp;rsquo;ve only talked about binary relations. What about functions?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to formally define them yet, but here&amp;rsquo;s a taste of where we&amp;rsquo;re going. Suppose we have a bunch of number-terms &amp;ndash; things like &amp;ldquo;1 + 1&amp;rdquo;, &amp;ldquo;9 - 6&amp;rdquo;, &amp;ldquo;(5 + 7) / 3&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Bare.drawio.svg&#34; width=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I like to picture an endless wall of these, stretching off into the distance:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/CircleWall.png&#34; width=&#34;700pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s hard to draw though.&lt;/p&gt;
&lt;p&gt;In elementary school, we&amp;rsquo;re taught to &lt;em&gt;evaluate&lt;/em&gt; number-terms &amp;ndash; to convert them to &lt;em&gt;values&lt;/em&gt;, that is, numbers.&lt;/p&gt;
&lt;p&gt;We can draw this:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Eval.svg&#34; width=&#34;450pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s another way to think about this situation (which becomes more important when you get to algebra). Instead of fully evaluating terms, we just ask whether or not they&amp;rsquo;re equal to each other. This looks like:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Equal.svg&#34; width=&#34;450pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(The loops might seem odd, but they&amp;rsquo;re part of how equality is usually defined.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s combine these pictures:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Equal_Eval.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(Ignore the overlapping edges. Really, this oughtta be a 3-dimensional diagram. You could make it with spaghetti and marshmallows&amp;hellip;)&lt;/p&gt;
&lt;p&gt;Now, compare:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;A diagram with some purple balls on the left and orange squares on the right. The balls and squares are grouped into highlighted regions. Each region contains multiple balls, but only one square. All balls are contained in a region, but some squares are on their own.&#34; src=&#34;assets/Functions.drawio.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;This is that vague picture I drew at the beginning. It&amp;rsquo;s what I think a function looks like.&lt;/p&gt;
&lt;p&gt;You might see some connection between these diagrams. Right now, it&amp;rsquo;s wordless. The rest of this series will be spent making it precise.&lt;/p&gt;
&lt;p&gt;Functions are ubiquitous in pure math. They have a simple definition, but are used in all sorts of ways. Functions can be used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;computing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;labeling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;grouping&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;forgetting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;embedding&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rearranging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll learn how to unpack the definition of functions to see the rich structure it implies. We&amp;rsquo;ll do this intuitively &amp;ndash; with lots of pictures &amp;ndash; to feel comfortable and confident in our understanding. But we&amp;rsquo;ll also do it formally: we&amp;rsquo;ll learn how to express our understanding as moves in a strict board game, to double-check our intuition and share it with others.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Note for mathematicians (don&#39;t read this if you&#39;re not a mathematician!!)&lt;/summary&gt;
&lt;p&gt;We&amp;rsquo;ll be proving the &amp;ldquo;trivial homomorphism theorem&amp;rdquo;: &amp;ldquo;Input-total equality-preserving binary relations are bijections between a partition of their domain and a subset of their codomain.&amp;rdquo; We&amp;rsquo;ll work with a mixture of classical and diagrammatic first-order logic. The diagrammatic logic will be an n-ary generalization of binary relation algebras &lt;a href=&#34;https://en.wikipedia.org/wiki/Relation_algebra&#34;&gt;[6]&lt;/a&gt; viewed as strict 2-categories, using spiders &lt;a href=&#34;https://en.wikipedia.org/wiki/ZX-calculus&#34;&gt;[7]&lt;/a&gt; &lt;a href=&#34;https://graphicallinearalgebra.net/&#34;&gt;[8]&lt;/a&gt; to represent relational joins.&lt;/p&gt;
&lt;p&gt;See, I told you you shouldn&amp;rsquo;t read this.&lt;/p&gt;
&lt;/details&gt;
&lt;p&gt;I&amp;rsquo;ll leave you with a parting&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Draw a table with 3 columns. For example:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;pre&gt;(suspect: Suspect, murder_weapon: Item, location: Room)&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For ease of drawing, only give it 2 or 3 rows. Make sure you add secondary tables listing the possible Suspects, Items, and Rooms.&lt;/p&gt;
&lt;p&gt;Convert your table to a &lt;em&gt;3-D plot&lt;/em&gt;. A 3D-plot can be drawn like this:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Cube.svg&#34; class=&#34;opaque&#34; width=&#34;200pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;If you don&amp;rsquo;t like 3D drawing, there&amp;rsquo;s another way to draw 3D plots that doesn&amp;rsquo;t require drawing any cubes. Pretend you&amp;rsquo;ve got a deli slicer.&lt;/p&gt;
&lt;p&gt;Next, convert your table to a &lt;em&gt;directed triangular hypergraph&lt;/em&gt;. This sounds scarier than it is. It&amp;rsquo;s a lot like a digraph &amp;ndash; you draw the nodes the same way, but the edges go between THREE nodes at a time. Here are two ways to draw triangular edges:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Hyperedge.svg&#34;width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(&amp;ldquo;Spider&amp;rdquo; is really the official math name for this shape, but it makes more sense when they&amp;rsquo;ve got more legs&amp;hellip;)&lt;/p&gt;
&lt;p&gt;(Once you&amp;rsquo;ve drawn it, can you rearrange your hypergraph to look similar to your 3D plot?)&lt;/p&gt;
&lt;h2 id=&#34;bonus-exercise&#34;&gt;Bonus Exercise&lt;/h2&gt;
&lt;p&gt;Draw a table with 4 columns. Contemplate the mess you&amp;rsquo;ve gotten yourself into.&lt;/p&gt;
&lt;p&gt;Hint: a line of cubes is like a square of squares.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>The Only Algorithm for Hard Problems: Shake and Pull Gently</title>
      <link>https://kazimuth.github.io/blog/beta/post/shake-and-pull-gently/</link>
      <pubDate>Fri, 01 Jul 2022 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/beta/post/shake-and-pull-gently/</guid>
      
      <description>&lt;p&gt;&lt;strong&gt;(Or, &amp;ldquo;regularized greedy algorithms and their applications.&amp;rdquo;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;James Gilles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Algorithm&amp;rdquo; is one of those words that sounds fancier than it really deserves. We hear all the time about the &amp;ldquo;facebook algorithm&amp;rdquo;, the &amp;ldquo;youtube algorithm&amp;rdquo;, &amp;ldquo;high frequency trading algorithms&amp;rdquo;, &amp;ldquo;artificial intelligence algorithms&amp;rdquo;, and so on. What are these, really?&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;facebook algorithm&amp;rdquo; is a large blob of software that Facebook uses to try to get people to stay on their website longer. It&amp;rsquo;s a complicated and expensive machine designed to extract user data and sell ads. All the social media &amp;ldquo;algorithms&amp;rdquo; boil down to that. Money making machines, based on a lot of loose guesses and elbow grease.&lt;/p&gt;
&lt;p&gt;A broader meaning of &amp;ldquo;algorithm&amp;rdquo; is &amp;ldquo;detailed strategy to accomplish something.&amp;rdquo; There&amp;rsquo;s a whole field of study dedicated to analyzing such things mathematically (computer science), but you don&amp;rsquo;t have to learn math to study them. In fact, they abound in everyday life. Everybody&amp;rsquo;s got their own collection of algorithms. How do you crack your eggs, sort your books, tie your shoelaces?&lt;/p&gt;
&lt;p&gt;I recently came across a particularly lovely everyday algorithm. &lt;a href=&#34;https://www.youtube.com/watch?v=Lq-Y7crQo44&#34;&gt;This youtube video&lt;/a&gt; gives the following strategy for untangling headphone wires:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    Shake and pull gently.
&lt;/div&gt;
&lt;p&gt;You might not believe that this works, so here&amp;rsquo;s a video of me trying it:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/correct.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;Like magic, they unfurl.
There is some care involved, though. If you pull too hard, you can knot them up worse:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/pull.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;And if you shake without pulling, you won&amp;rsquo;t accomplish much:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/shake.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;But when you do both at the same time, in the right ratio, it works surprisingly well. What&amp;rsquo;s going on here? How can such a simple approach yield such good results?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s study the ingredients. What does the pulling do? I would say that the pulling &lt;em&gt;encourages the system to stretch out&lt;/em&gt;. (By &amp;ldquo;system&amp;rdquo; I just mean &amp;ldquo;headphones&amp;rdquo;.)&lt;/p&gt;
&lt;p&gt;What does this have to do with untangling? Well, tangles keep the system from stretching out fully. For the system to be as stretched out as you can get, you need to get rid of the tangles. But we can&amp;rsquo;t be too direct about it. Simply pulling on the wires knots them into a tight ball, and we get stuck.&lt;/p&gt;
&lt;p&gt;How do we avoid getting knotted up? Shaking as we pull does something interesting. It encourages the system to explore more possibilities, by giving the wires motion and energy &amp;ndash; lives of their own. Lively wires are less inclined to get knotted up. I think of them as being &lt;em&gt;slipperier&lt;/em&gt; or &lt;em&gt;blurrier&lt;/em&gt;. In a thermodynamic sense, you could say that they&amp;rsquo;re &lt;em&gt;hotter&lt;/em&gt; &amp;ndash; that is, they have a lot of diffuse kinetic energy &amp;ndash; that is, they&amp;rsquo;re wiggling around.&lt;/p&gt;
&lt;p&gt;Each second, each wiggling wire explores many different configurations. Where two motionless wires tend to get knotted up, two moving wires are more likely to find a configuration that allows them to slip past each other. This added flexibility allows the system to slip past sticking points, on its way to being fully stretched out.&lt;/p&gt;
&lt;p&gt;Interesting enough. So what?&lt;/p&gt;
&lt;p&gt;This idea &amp;ndash; gently pulling a system in some direction, while adding in random shaking or smoothing &amp;ndash; actually underlies many computer algorithms as well. That video I linked earlier does a great job of explaining this metaphor for one particular problem. But it&amp;rsquo;s actually really broadly applicable, and I wanted to riff on it a while.&lt;/p&gt;
&lt;p&gt;In particular, it&amp;rsquo;s broadly applicable to algorithms that solve &amp;ldquo;hard&amp;rdquo; problems. What does &amp;ldquo;hard&amp;rdquo; mean? Computer science has many different mathematical models for studying and comparing computations &amp;ndash; asking questions like, &amp;ldquo;if you increase the amount of input data, how much more time do you need to solve it?&amp;rdquo; For easy problems, you don&amp;rsquo;t need much extra time; for hard problems, you need lots of extra time.&lt;/p&gt;
&lt;p&gt;Some examples of easy problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sorting lists of numbers&lt;/li&gt;
&lt;li&gt;Searching through sorted tables of data&lt;/li&gt;
&lt;li&gt;Finding paths through road maps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some examples of hard problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Laying out circuits to minimize production costs&lt;/li&gt;
&lt;li&gt;Training neural networks (&amp;ldquo;AIs&amp;rdquo;) to recognize images&lt;/li&gt;
&lt;li&gt;Solving logic puzzles with thousands of variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ignoring the mathematical models, my rough rule of thumb is that &amp;ldquo;easy&amp;rdquo; problems generally take a fraction of a second on a modern computer, where &amp;ldquo;hard&amp;rdquo; problems take hours or days. But there are more differences than mere time and space.&lt;/p&gt;
&lt;p&gt;See, you start your computer science degree with an Algorithms 101 class, which is about techniques for solving easy problems. These techniques have a generally &lt;em&gt;reductionist&lt;/em&gt; flavor. Given a problem, you break the problem into parts, solve each part separately, and then combine the solutions.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34;&gt;Merge sort&lt;/a&gt; comes to mind:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;merge sort diagram&#34; src=&#34;assets/mergesort.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;The basic idea is that you can combine two sorted lists of numbers by comparing the elements at the front and pulling off the smaller one. This gives you a sorted list of all the elements in both lists. This algorithm is called &amp;ldquo;merge&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;But if we start with an entirely unsorted list, how can we find sorted lists? Simple, break it into single elements, which are &amp;ldquo;sorted&amp;rdquo;, and then repeatedly apply &amp;ldquo;merge&amp;rdquo; to build up bigger and bigger runs of sorted numbers.)&lt;/p&gt;
&lt;p&gt;I find understanding this sort of algorithm very satisfying. It gives me a feeling of power, like I&amp;rsquo;m designing a factory production line, and know precisely what each machine involved has to do.&lt;/p&gt;
&lt;p&gt;But when you get out of algorithms 101, you quickly run into problems where this sort of approach isn&amp;rsquo;t possible. These problems are more than the sums of their parts &amp;ndash; different parts of the system interact with each other, and you can&amp;rsquo;t study them in isolation anymore.&lt;/p&gt;
&lt;p&gt;For example, laying out circuits. For very complicated circuits like CPUs, engineers don&amp;rsquo;t typically start by designing a physical layout of the circuit. Instead, they just specify components and their connections by name; component A links to component B which links to component D, there is a batch of component E&amp;rsquo;s connected to each other in a daisy chain, etc. (This is usually done in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardware_description_language&#34;&gt;hardware description language&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The problem is to pick locations for components, and then connect them with wiring, while minimizing how much space the wiring takes up (since circuit space is expensive.) This is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Place_and_route&#34;&gt;Place and Route&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But this sort of problem isn&amp;rsquo;t amenable to reductionist solutions. You can&amp;rsquo;t divide the circuit into chunks, lay them out in efficient ways indidually, and then link them together &amp;ndash; because the cross links take up space too, but you might not have left room for them! Maybe you bump some of your old links out of the way &amp;ndash; but oops, now they&amp;rsquo;re intruding on space that was used for something else! And so on.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t solve the problem in parts; you have to solve it &lt;em&gt;all at once&lt;/em&gt;, because its parts are all tangled up. But how can we possibly do such a thing?&lt;/p&gt;
&lt;p&gt;The answer, of course, is &amp;ldquo;shake and pull gently&amp;rdquo;. You start by making a very bad layout that takes up way, way more space than it needs; this is relatively easy to do. Then, you randomly wiggle the wires of your design, while pulling them tight to take up less space. You do this for a while, slowly decreasing your wiggling and increasing your pulling, and you stop when the circuit is small enough to satisfy you.&lt;/p&gt;
&lt;p&gt;This algorithm is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Simulated_annealing&#34;&gt;simulated annealing&lt;/a&gt;. Here&amp;rsquo;s a graphic of it; in this case it&amp;rsquo;s trying to find the shortest path through all the dots that goes through each dot exactly once:&#39;&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;gif of traveling salesman problem being solved with simulated annealing&#34; src=&#34;assets/TSPSA.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;You may notice that this example is not moving smoothly, like headphone wires, but instead is proceeding in discrete jumps. Simulated annealing for circuits is similar: Circuit wires are often constrained to be laid out on a grid, and can&amp;rsquo;t move smoothly. So instead, you apply small random jumps, moving bits of wire from one grid corner to another. This acts as &amp;ldquo;shaking&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Also, before you do any jump, you ask: will this improve or worsen the cost of the the chip? If the answer is &amp;ldquo;improve&amp;rdquo;, you do the jump; but if the answer is &amp;ldquo;worsen&amp;rdquo;, you don&amp;rsquo;t always reject it. Instead, you flip a coin. On heads, you do the jump anyway. That is, you sometimes accept &amp;ldquo;bad&amp;rdquo; random jumps, which make the chip more expensive.&lt;/p&gt;
&lt;p&gt;This might seem counter-productive, but it&amp;rsquo;s how we implement &amp;ldquo;shake and pull gently&amp;rdquo; in a non-bendy setting. If you never accepted bad jumps, it would be like pulling your headphone without shaking: all the &amp;ldquo;good&amp;rdquo; jumps would quickly get applied. But then there might be many more improvements available, just not immediately.&lt;/p&gt;
&lt;p&gt;Accepting bad random jumps encourages the system to explore many more possibilities. But we&amp;rsquo;re still weighting the dice, so to speak; good jumps are more likely to be applied than bad. So the system tends to drift in a good &amp;ndash; less expensive &amp;ndash; direction.&lt;/p&gt;
&lt;p&gt;The algorithm is called &amp;ldquo;simulated annealing&amp;rdquo; because you typically start with a high bad-accept chance and then lower it over time. &amp;ldquo;Annealing&amp;rdquo; is a process where you heat slowly and cool metal to harden it. A high bad-accept chance is like a high temperature, because it induces more random motion; a low bad-accept chance is like a low temperature, because it doesn&amp;rsquo;t. By heating the system hot and slowly cooling it, you encourage it to loosen up and then slowly converge to a good solution.&lt;/p&gt;
&lt;p&gt;You might notice that this is by no means guaranteed to actually work &amp;ndash; that is, find a solution you like. It could just get stuck, spit out something worse than you put into it. This is something I was very uncomfortable with when I started studying hard problems: if there&amp;rsquo;s no guarantee it&amp;rsquo;ll work, how can you trust your algorithm?&lt;/p&gt;
&lt;p&gt;This is a general theme in hard problems. Solving them is less like designing a factory and more like baking: you have to know your ingredients well, and combine them correctly; but after a certain point, all you can do is wait and pray.&lt;/p&gt;
&lt;p&gt;Broadly speaking, there are far too many possible solutions to check if any given answer is the absolute best answer. You can only compare your solution with other, &amp;ldquo;nearby&amp;rdquo; solutions (e.g. solutions a single jump away). So instead of asking, &amp;ldquo;is this the best possible answer?&amp;rdquo;, you simply ask, &amp;ldquo;is this answer good enough?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And in fact, in practice, the answer often is good enough. This approach is used to lay out many of the hyper-complex computer chips we use every day. And, if you squint, you can see the bones of this algorithm in many other hard problems. I&amp;rsquo;ll run through a quick battery of examples. (I&amp;rsquo;m going to skimp on intuitive explanation here, because when I tried to explain each of these in detail it added a few thousand words to the article, and nobody has time for that&amp;hellip; I&amp;rsquo;ll probably come back and talk about deep neural networks more in a later post. They&amp;rsquo;re near and dear to my heart, like a clogged artery.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deep neural networks, trained to imitate a dataset with &lt;a href=&#34;https://en.wikipedia.org/wiki/Stochastic_gradient_descent&#34;&gt;stochastic gradient descent&lt;/a&gt;: &amp;ldquo;gradient descent&amp;rdquo; involves &amp;ldquo;pulling&amp;rdquo; on the tuning parameters of a statistical model to make them approximate some dataset. &amp;ldquo;Stochastic&amp;rdquo; gradient descent involves randomly sampling sub-chunks of the dataset to approximate at a time. This random sampling acts like &amp;ldquo;shaking&amp;rdquo;, and the gradient descent part acts like &amp;ldquo;pulling&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Genetic algorithms: often used to explain deep neural networks, although they aren&amp;rsquo;t  actually used much anymore. But the analogy is close enough: genetic algorithms are like a slightly more complex version of simulated annealing, with a population of candidate solutions being randomly mutated instead of just a single one. (You could argue that biological evolution is a &amp;ldquo;shake and pull gently&amp;rdquo; algorithm, but I&amp;rsquo;m not sure I&amp;rsquo;d agree; biological evolution doesn&amp;rsquo;t actually have a goal, it&amp;rsquo;s just that whatever reproduces, reproduces, and whatever doesn&amp;rsquo;t, doesn&amp;rsquo;t&amp;hellip;)&lt;/li&gt;
&lt;li&gt;SAT / SMT solvers: Maybe calling backtracking search &amp;ldquo;shake and pull gently&amp;rdquo; is pushing it, since there isn&amp;rsquo;t any explicit randomness involved, but I think the analogy still works; you just have to view exhaustive search as a generalized form of random sampling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Actually you can &lt;a href=&#34;https://arxiv.org/abs/2109.14119&#34;&gt;do without random sampling&lt;/a&gt; in neural networks as well, but you have to add in other ingredients that approximate its smoothing effects. So what matters more than the random shaking &lt;em&gt;itself&lt;/em&gt; is how the random shaking smooths and simplifies the problem. You could call it a &amp;ldquo;good rule of thumb for making the problem more regular&amp;rdquo;; machine learning experts call such things &amp;ldquo;regularization heuristics&amp;rdquo;, because if you don&amp;rsquo;t use long words you can&amp;rsquo;t get research funding.)&lt;/p&gt;
&lt;p&gt;By the way, a &amp;ldquo;greedy algorithm&amp;rdquo; is just an algorithm that blindly makes small improvements to a solution without thinking very hard about them. The byline of this post was &amp;ldquo;regularized greedy algorithms and their applications&amp;rdquo;; now we can say what a &amp;ldquo;regularized greedy algorithm&amp;rdquo; actually is. It&amp;rsquo;s an &amp;ldquo;algorithm that blindly moves in a direction while trying not to get stuck.&amp;rdquo; Or, more simply, &amp;ldquo;pull and shake gently&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Stated so bluntly, maybe it&amp;rsquo;s obvious why such things have broad applications. Did this really deserve a whole 2000-word post? Well, here we are.&lt;/p&gt;
&lt;p&gt;I hope this helps demystify &amp;ldquo;algorithms&amp;rdquo;; whenever you see a headline about &amp;ldquo;algorithms&amp;rdquo;, there&amp;rsquo;s a good chance it boils down to &amp;ldquo;shake and pull gently&amp;rdquo;. It may be worth questioning whether we should trust &amp;ldquo;shake and pull gently&amp;rdquo; to select what news stories we read, whether we receive home loans, or whether we are drone striked as a terrorists. Especially when the &amp;ldquo;pull gently&amp;rdquo; part of the algorithm is attempting to optimize the profits of Facebook, Wells Fargo, or Raytheon, respectively.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Postscript:&lt;/p&gt;
&lt;p&gt;It occurs to me that there&amp;rsquo;s something I oughtta admit. It actually took me a bunch of tries to get that shot of the headphones coming untied. Most of the times I tried it didn&amp;rsquo;t work, or only worked partially, leaving me with some knots to undo by hand. Even if I can describe the technique in a simple way, actually applying it takes practice and skill.&lt;/p&gt;
&lt;p&gt;That applies to all the algorithms I&amp;rsquo;ve talked about here. Neural networks, SMT solvers, Place &amp;amp; Route engines; none of these things are straightforward. The devil is in the details, and getting to know such details can be a life&amp;rsquo;s work. I don&amp;rsquo;t want to denigrate that work; just point out some shared themes.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
