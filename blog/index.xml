<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>james&#39;s web log</title>
    <link>https://kazimuth.github.io/blog/</link>
    <description>Recent content on james&#39;s web log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2023 18:14:54 -0400</lastBuildDate><atom:link href="https://kazimuth.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Equality and Stretchiness</title>
      <link>https://kazimuth.github.io/blog/post/equality-and-stretchiness/</link>
      <pubDate>Tue, 22 Aug 2023 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/post/equality-and-stretchiness/</guid>
      
      <description>&lt;h2 id=&#34;equality--stretchiness&#34;&gt;Equality &amp;amp; Stretchiness&lt;/h2&gt;
&lt;p&gt;This is a brief addition to my &lt;a href=&#34;../three-ways-to-draw-tables&#34;&gt;last post&lt;/a&gt;. It used to be part of the post,
but then the post was too long. Probably this needs to be edited into something else.&lt;/p&gt;
&lt;p&gt;This is a musing on something I said in that post:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Digraphs are stretchy.&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So for instance, we would consider these three digraphs to be the same, because we can rearrange and stretch them into each other:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Same.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;To write down that we think two things are the same, we put an equals sign between them:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Equal.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(We could also use a three-directional equal sign:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Threeary_Equal.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;But we haven&amp;rsquo;t talked about ternary relations yet.)&lt;/p&gt;
&lt;p&gt;It might seem a little strange to put an equals sign between things that aren&amp;rsquo;t &lt;em&gt;exactly&lt;/em&gt; the same. But you actually do this all the time in math. Consider the equation:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;p class=&#34;big&#34;&gt;1 + 1&lt;/p&gt;&lt;div class=&#34;center-sequence-fence-post&#34;&gt;=&lt;/div&gt;&lt;p class=&#34;big&#34;&gt;2&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The things on either side of the equal sign here aren&amp;rsquo;t exactly the same &amp;ndash; they&amp;rsquo;re just &lt;em&gt;the same enough for our purposes&lt;/em&gt;. You could also think of them as &lt;em&gt;different ways to accomplish the same thing.&lt;/em&gt; To get a &amp;ldquo;2&amp;rdquo;, you can take two &amp;ldquo;1&amp;quot;s and add them together, or you can just write down a &amp;ldquo;2&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In the case of our digraphs, we consider the above diagrams to be &lt;em&gt;different ways to draw the same digraph&lt;/em&gt;. Since the digraph is stretchy, it doesn&amp;rsquo;t matter how it&amp;rsquo;s laid out in space.&lt;/p&gt;
&lt;p&gt;We can come up with similar rules for our other diagram types. For example, I declare that our tables are unordered: we agree not to care about the order of the rows. So we can write:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person: Person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;=&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person: Person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: Person&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We now know how to tell when digraphs are the same, and how to tell when tables are the same. What about 2D Plots?&lt;/p&gt;
&lt;h4 id=&#34;drawing-exercise-3&#34;&gt;Drawing Exercise 3&lt;/h4&gt;
&lt;p&gt;Come up with two 2D plots that look different, but convey the same information. Write an equals sign between them.&lt;/p&gt;
&lt;details class=&#34;little&#34;&gt;
&lt;summary&gt;Hint&lt;/summary&gt;
You could rearrange rows, rearrange columns, move a legend to the opposite side, or even turn the whole plot 45 degrees. Nobody can stop you.
&lt;/details&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;At some point we seem to have slipped into talking about math. My mistake.&lt;/p&gt;
&lt;p&gt;Well, since we&amp;rsquo;re already here, might as well go further. So far we&amp;rsquo;ve only talked about binary relations. What about functions?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not going to formally define them yet, but here&amp;rsquo;s a taste of where we&amp;rsquo;re going. Suppose we have a bunch of number-expressions &amp;ndash; things like &amp;ldquo;1 + 1&amp;rdquo;, &amp;ldquo;9 - 6&amp;rdquo;, &amp;ldquo;(5 + 7) / 2&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Bare.svg&#34; width=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I like to picture an endless wall of these, stretching off into the distance:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/CircleWall.png&#34; width=&#34;700pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s hard to draw though.&lt;/p&gt;
&lt;p&gt;In elementary school, we&amp;rsquo;re taught to &lt;em&gt;evaluate&lt;/em&gt; number-expressions &amp;ndash; to convert them to &lt;em&gt;values&lt;/em&gt;, that is, numbers.&lt;/p&gt;
&lt;p&gt;We can draw this:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Eval.svg&#34; width=&#34;450pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;There&amp;rsquo;s another way to think about this situation (which becomes more important when you get to algebra). Instead of fully evaluating things, we just ask whether or not they&amp;rsquo;re equal to each other. This looks like:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Equal.svg&#34; width=&#34;450pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(The loops might seem odd, but they&amp;rsquo;re part of how equality is usually defined: 1+1 = 1+1. Expressions equal themselves.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s combine these pictures:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Terms_Equal_Eval.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;(Ignore the overlapping edges. Really, this oughtta be a 3-dimensional diagram. You could make it with spaghetti and marshmallows&amp;hellip;)&lt;/p&gt;
&lt;p&gt;Now, compare:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;A diagram with some purple balls on the left and orange squares on the right. The balls and squares are grouped into highlighted regions. Each region contains multiple balls, but only one square. All balls are contained in a region, but some squares are on their own.&#34; src=&#34;assets/Functions.drawio.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;This is that vague picture I drew at the beginning (of this post series). It&amp;rsquo;s what I think a function looks like.&lt;/p&gt;
&lt;p&gt;You might see some connection between these diagrams. The rest of this series will be spent making this connection precise.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to learn the rules of the board game of math, and how to compose them into proofs. This&amp;rsquo;ll look a lot like what we&amp;rsquo;ve been doing so far, we&amp;rsquo;ll just be more uptight about it. We&amp;rsquo;ll learn about different ways to combine and connect different relations. And we&amp;rsquo;ll learn the definition of a function, and how to unpack it to visualize the rich structure it implies.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll also talk about how functions &amp;ndash; and relations &amp;ndash; are only part of the picture. I like them, though, because they&amp;rsquo;re so easy to visualize.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Higher-dimensional bonus exercises</title>
      <link>https://kazimuth.github.io/blog/post/three-ways-to-draw-tables-bonus/</link>
      <pubDate>Tue, 22 Aug 2023 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/post/three-ways-to-draw-tables-bonus/</guid>
      
      <description>&lt;p&gt;(Addon to &lt;a href=&#34;../three-ways-to-draw-tables/&#34;&gt;this post&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;bonus-exercise-1&#34;&gt;Bonus Exercise 1&lt;/h2&gt;
&lt;p&gt;What if we had a table with 3 columns? For example&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;(suspect, murder_weapon, location)&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This would be a way to draw a &lt;span class=&#34;introvocab&#34;&gt;ternary relation&lt;/span&gt;. What other ways could we draw that relation? Consider&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Hyperedge.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Cube.svg&#34; width=&#34;400pt&#34;&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Convert these pictures to a 3-column table. Make sure to add secondary tables of Suspects, Murder Weapons, and Locations.&lt;/li&gt;
&lt;li&gt;Add an extra row to your table. A new suspect, a new location&amp;hellip;&lt;/li&gt;
&lt;li&gt;Convert your 2-row, 3-column table to a wacky-looking triple-digraph like the one above.
&lt;ul&gt;
&lt;li&gt;The technical name for this diagram type would be&amp;hellip; &lt;span class=&#34;introvocab&#34;&gt;oriented triangular hypergraph&lt;/span&gt;, or something. Specifically, a &lt;span class=&#34;introvocab&#34;&gt;tripartite oriented triangular hypergraph&lt;/span&gt;. But that&amp;rsquo;s a mouthful.&lt;/li&gt;
&lt;li&gt;Try using triangles instead of those squiggly triple-edges.
&lt;ul&gt;
&lt;li&gt;The technical name for those would be &lt;em&gt;leg-labeled spiders&lt;/em&gt;. No, really.&lt;/li&gt;
&lt;li&gt;Triangles will tend to overlap, which is why I prefer the spiders.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A related plot type is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Parallel_coordinates&#34;&gt;parallel coordinates plot&lt;/a&gt;. You could try drawing one of these as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convert your table to a 3D Plot.
&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t like 3d drawing, there&amp;rsquo;s a way to do this without drawing any cubes. It starts by drawing three 2D plots next to each other, with the same legends&amp;hellip; but you should give each one a different title.&lt;/li&gt;
&lt;li&gt;This is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Small_multiple&#34;&gt;&amp;ldquo;small multiples technique&amp;rdquo;&lt;/a&gt;, but I prefer to think of it as the &amp;ldquo;deli slicer technique.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bonus-exercise-2&#34;&gt;Bonus exercise 2&lt;/h2&gt;
&lt;p&gt;Draw a table with 4 columns. Contemplate the mess you&amp;rsquo;ve gotten yourself into.&lt;/p&gt;
&lt;p&gt;Hint: Try using a grid of small multiples.&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;My &lt;a href=&#34;https://archive.org/details/the-visual-display-of-quantitative-information-2ed-by-tufte-edward-r.-z-lib.org&#34;&gt;favorite book on diagrams&lt;/a&gt;, free online.&lt;/p&gt;
&lt;p&gt;Also check out &lt;a href=&#34;https://people.csail.mit.edu/ebakke/research/reportlayout_infovis2013.pdf&#34;&gt;this paper&lt;/a&gt; from &lt;a href=&#34;https://people.csail.mit.edu/ebakke/sieuferd/&#34;&gt;this project&lt;/a&gt;, one of my favorites. Looking at the diagrams might give you some more table drawing ideas.&lt;/p&gt;
&lt;p&gt;Other visual math resources: All the &lt;a href=&#34;https://www.youtube.com/watch?v=cDofhN-RJqg&amp;amp;list=PLRq5rHXCLP_uFOJrIYGpaKs8uj2OMpqjt&#34;&gt;Summer of Math Explanation&lt;/a&gt; videos on youtube are excellent. &lt;a href=&#34;https://betterexplained.com/archives/&#34;&gt;This blog&lt;/a&gt; is pretty great. &lt;a href=&#34;https://graphicallinearalgebra.net/&#34;&gt;This other blog&lt;/a&gt; got me to start this series. And &lt;a href=&#34;https://arxiv.org/abs/1803.05316&#34;&gt;this&lt;/a&gt; is a free college-level textbook about abstract nonsense diagrams.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Three Ways to Draw Data Tables</title>
      <link>https://kazimuth.github.io/blog/post/three-ways-to-draw-tables/</link>
      <pubDate>Tue, 22 Aug 2023 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/post/three-ways-to-draw-tables/</guid>
      
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;!--
&gt; The universe is not veiled; all its activities lie open.
&gt;
&gt; &amp;emsp; &amp;mdash; [圓悟克勤](https://en.wikipedia.org/wiki/Yuanwu_Keqin)
--&gt;
&lt;p&gt;This post is about three types of diagram:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img src=&#34;assets/Three_Diagrams.svg&#34; width=&#34;600pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;These look different, but they&amp;rsquo;re really just different ways to convey the same information. We&amp;rsquo;ll learn how to convert back and forth between them, which is a handy skill if you spot them in the wild.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a fancy name for these diagrams. If you want to impress people, you can call them all &lt;span class=&#34;introvocab&#34;&gt;Binary Relation Diagrams&lt;/span&gt;. You could also just call them &lt;span class=&#34;introvocab&#34;&gt;Relations&lt;/span&gt;. (I&amp;rsquo;ll be saying &lt;span class=&#34;introvocab&#34;&gt;Relations&lt;/span&gt; a lot, because I want to save the word &amp;ldquo;Table&amp;rdquo; specifically for the middle diagram type.)&lt;/p&gt;
&lt;p&gt;(Note: This post is the first in a series. The series will be about relations, and also about a special kind of relation called a &lt;span class=&#34;introvocab&#34;&gt;Function&lt;/span&gt;. My overall goal is to convince you that &lt;em&gt;functions look like this&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;A diagram with some balls on the left and squares on the right. The balls and squares are grouped into highlighted regions. Each region contains multiple balls, but only one square. All balls are contained in a region, but some squares are on their own.&#34; src=&#34;assets/Functions.drawio.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Later in the series, we&amp;rsquo;ll talk about connections between diagrams, math, programming, and databases. We&amp;rsquo;ll see how these different fields study similar subject matter in very different ways, and learn how to translate between them.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry though. This post is standalone, and it won&amp;rsquo;t have any math in it. Only pictures :)&lt;/p&gt;
&lt;!--
People think math is boring and hard to understand. They&#39;re right, but I wish they weren&#39;t.

The thing is, math is *basically* just a pen-and-paper board game. The rules of math are carefully designed to simulate the real world. It&#39;s not magic.

But people don&#39;t usually get taught *why* math works the way it does, at least until they get to college. In school, you just get handed a bunch of rules to memorize. I don&#39;t know about you, but I can&#39;t learn that way.

There&#39;s a number of people working on making friendly and intuitive math resources ([[1]](https://www.youtube.com/watch?v=cDofhN-RJqg&amp;list=PLRq5rHXCLP_uFOJrIYGpaKs8uj2OMpqjt) [[2]](https://betterexplained.com/archives/) [[3]](https://graphicallinearalgebra.net/) [[4]](https://archive.org/details/the-visual-display-of-quantitative-information-2ed-by-tufte-edward-r.-z-lib.org)). I think these resources are especially needed for &#34;pure&#34;, &#34;professional&#34; math. Professional math seems scary, but that&#39;s just because it usually isn&#39;t explained very well. It&#39;s a big board game! Among other things.

We&#39;ll get an intuitive understanding of what this means, and learn how to *prove* it -- how to use it as a strategy in the game of formal math, if a pro mathematician challenges you to a duel.

Let&#39;s begin.
--&gt;
&lt;h2 id=&#34;the-nitty-gritty&#34;&gt;The Nitty Gritty&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s go through our three ways to draw relation diagrams.&lt;/p&gt;
&lt;!-- First, we need to define our playing pieces. The most basic piece we&#39;ll use is called a &lt;span class=&#34;introvocab&#34;&gt;binary relation&lt;/span&gt;. Instead of starting with strict, by-the-book rules, let&#39;s keep it relaxed, and try to get a general sense of what relations look like. There are multiple ways to draw them, but they&#39;re all connected. --&gt;
&lt;h3 id=&#34;diagram-type-one-directed-graphs&#34;&gt;Diagram type one: Directed Graphs&lt;/h3&gt;
&lt;p&gt;Our first kind of diagram is my favorite. It&amp;rsquo;s called a &amp;ldquo;directed graph&amp;rdquo;, or &lt;span class=&#34;introvocab&#34;&gt;digraph&lt;/span&gt;, and it looks like this:&lt;/p&gt;
&lt;!-- SCALE: drawio 1in -&gt; 108pt --&gt; 
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;Circles labeled 1,2,3,4. There are arrows going 1 to 2, 1 to 3, 3 to 4, 4 to 1&#34; src=&#34;assets/R_Graph1.svg&#34; width=&#34;324pt&#34; height=&#34;324pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;A digraph is a collection of &lt;span class=&#34;introvocab&#34;&gt;nodes&lt;/span&gt; &amp;ndash; labeled circles &amp;ndash; and a collection of &lt;span class=&#34;introvocab&#34;&gt;edges&lt;/span&gt; &amp;ndash; little arrows going between the nodes. We can model all sorts of situations with digraphs. For instance, a family tree can be represented as a digraph. We draw a node for each person, then draw edges from parents to children:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;Circles labeled Cindy,Felix,Ray,Eileen,Rob,Louise,Jim,Mac. There are arrows going Cindy to Rob, Felix to Rob, Ray to Louise, Eileen to Louise, Rob to Jim, Rob to Mac, Louise to Jim, Louise to Mac&#34; width=&#34;432pt&#34; src=&#34;assets/Family_Digraph_1.svg&#34;&gt;
&lt;/div&gt;
&lt;p&gt;We can also draw digraphs of love triangles, by drawing edges from people to people they like:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Love Triangles.svg&#34; width=&#34;756pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Notice that nodes are allowed to have edges to themselves. Also, nodes don&amp;rsquo;t have to have any edges. In the &amp;ldquo;Romantic Comedy&amp;rdquo; example, C is a sidekick who&amp;rsquo;s not interested in A or B.&lt;/p&gt;
&lt;p&gt;(At least, that&amp;rsquo;s one way to interpret the diagram. It doesn&amp;rsquo;t really say anything besides who likes who.)&lt;/p&gt;
&lt;p&gt;Relations don&amp;rsquo;t have to be about relationships between people. For example, we could draw a digraph of which classes use which books in a school:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Regular_Arrows.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Notice how this digraph is divided into two parts &amp;ndash; the classes and the books. All the edges go from classes to books. Digraphs like this are called &lt;span class=&#34;introvocab&#34;&gt;bipartite&lt;/span&gt;, which means &amp;ldquo;two parts&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t have to use arrows to draw our digraph edges. We can use any shape we want, as long as the ends look different. For instance, we could use different colored circles:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Or even add text labels:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows_2.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;I like this because it&amp;rsquo;s very clear what the edges mean. It&amp;rsquo;s a lot of work to add all the labels though.
We can compromise by adding a legend:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; class=&#34;extrapad&#34; src=&#34;assets/Classes_Multi_Arrows_Legend.drawio.svg&#34; width=&#34;648pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Now that we&amp;rsquo;ve added legends, it&amp;rsquo;s very easy to convert to our next way to draw relations: tables.&lt;/p&gt;
&lt;h3 id=&#34;diagram-type-two-two-column-tables&#34;&gt;Diagram Type Two: Two-Column Tables&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the class-book relation, redrawn as a &lt;span class=&#34;introvocab&#34;&gt;Two-Column Table&lt;/span&gt;. We use the labels from the legend as column titles.&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;class&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;book&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Math 203&lt;/td&gt;&lt;td&gt;The Calculus Reader&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Astronomy 101&lt;/td&gt;&lt;td&gt;The Planetary System&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;This is less exciting, but more orderly.&lt;/p&gt;
&lt;p&gt;We can also convert our other graphs into tables. For instance we can take the &amp;ldquo;Coveting&amp;rdquo; graph from before, add a legend, and convert it to a table:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Coveting_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Look at this for a minute to make sure you understand the translation.
If it helps, you can compare the &amp;ldquo;Pining&amp;rdquo; graph:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Notice how the last row swaps direction, just like the last edge swaps direction.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s one more way to draw relations&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;diagram-type-three-2d-plots&#34;&gt;Diagram Type Three: 2D Plots&lt;/h3&gt;
&lt;p&gt;This diagram type makes better use of 2D space. Here&amp;rsquo;s the Coveting relation again, now drawn as a &lt;span class=&#34;introvocab&#34;&gt;2D Plot&lt;/span&gt;:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Coveting_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;person&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;You might notice that this diagram type flips the columns around. This is on purpose. It&amp;rsquo;s because positions in a 2D plot are traditionally written &lt;strong&gt;(horizontal, vertical)&lt;/strong&gt; or &lt;strong&gt;(x, y)&lt;/strong&gt;. Since our relation is &lt;strong&gt;(person, likes)&lt;/strong&gt;, I&amp;rsquo;ve laid out the &lt;strong&gt;person&lt;/strong&gt; column horizontal and left the &lt;strong&gt;likes&lt;/strong&gt; column vertical.&lt;/p&gt;
&lt;p&gt;Compare Coveting with Pining:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;table class=&#34;twodplot&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;person&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s apply this to our classes-books relation:&lt;/p&gt;
&lt;div class=&#34;center-sequence-column&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Classes_Multi_Arrows_Legend.drawio.svg&#34; class=&#34;opaque&#34; width=&#34;550pt&#34; height=&#34;440pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;twodplot small&#34;&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;th rowspan=&#34;4&#34; class=&#34;right&#34;&gt;book&lt;/th&gt;
                &lt;th class=&#34;right&#34;&gt;Hamlet&lt;/th&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;Moby Dick&lt;/th&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;   
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;The Calculus Reader&lt;/th&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;th class=&#34;right&#34;&gt;The Planetary System&lt;/th&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth&#34;&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                    &lt;td class=&#34;onefourth selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;
                &lt;th class=&#34;left&#34;&gt;English Lit 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Whaling 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Math 101&lt;/th&gt;
                &lt;th class=&#34;left&#34;&gt;Astronomy 101&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;4&#34;&gt;class&lt;/th&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;(We&amp;rsquo;ve used a trick here to take up less space. Because the class-books relation is bipartite &amp;ndash; split into classes and books &amp;ndash; we can put only classes on the bottom, and only books on the side. For relations that aren&amp;rsquo;t split up like that, you have to put ALL the nodes on both sides.)&lt;/p&gt;
&lt;h2 id=&#34;equivalent-diagrams&#34;&gt;Equivalent diagrams&lt;/h2&gt;
&lt;p&gt;We now have three ways to draw relations: &lt;span class=&#34;introvocab&#34;&gt;Digraphs&lt;/span&gt;, &lt;span class=&#34;introvocab&#34;&gt;Two-Column Tables&lt;/span&gt;, and &lt;span class=&#34;introvocab&#34;&gt;2D Plots&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I want to convince you that these types of diagrams are &lt;em&gt;equivalent&lt;/em&gt;: you can convert between them as needed, without losing information.&lt;/p&gt;
&lt;p&gt;If this post were about &lt;em&gt;formal&lt;/em&gt; math, this is where I would write you a &lt;span class=&#34;introvocab&#34;&gt;proof&lt;/span&gt;. See, to convince each other of things, mathematicians write &amp;ldquo;proofs&amp;rdquo;. A &amp;ldquo;proof&amp;rdquo; is a strategy in a board game. The basic moves in the board game are supposed to be really simple. So simple, that everybody agrees they should be allowed. Bigger strategies are built up out of simple moves. (In this case, the moves would be things like converting between diagrams.)&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to explain a bunch of formal game rules here &amp;ndash; they can get pretty dry. But I still want to convince you like I&amp;rsquo;d convince a mathematician. See, mathematicians have a high bar to be &amp;ldquo;convinced&amp;rdquo; of things. If you tell them something &amp;ldquo;works&amp;rdquo;, they&amp;rsquo;ll ask &lt;em&gt;how&lt;/em&gt; it works. They&amp;rsquo;ll also ask what &lt;span class=&#34;introvocab&#34;&gt;conditions&lt;/span&gt; need to be met for it to work. And usually, they&amp;rsquo;ll want to try it out for themselves.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re not doing math here, but we &lt;em&gt;are&lt;/em&gt; talking about diagrams. So far I&amp;rsquo;ve been drawing all of them. Why not try drawing some yourself? Here are some exercises you can do (if you like that sort of thing):&lt;/p&gt;
&lt;details class=&#34;big&#34;&gt;
&lt;summary&gt;Drawing Exercises&lt;/summary&gt;
&lt;h4 id=&#34;drawing-exercise-1&#34;&gt;Drawing Exercise 1&lt;/h4&gt;
&lt;p&gt;I want to convince you that &lt;span class=&#34;introvocab&#34;&gt;Digraphs&lt;/span&gt; and &lt;span class=&#34;introvocab&#34;&gt;2D Plots&lt;/span&gt; contain the same information. This means that if we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a &lt;span class=&#34;introvocab&#34;&gt;Digraph&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Convert it to a &lt;span class=&#34;introvocab&#34;&gt;2D Plot&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Convert it &lt;em&gt;back&lt;/em&gt; to a &lt;span class=&#34;introvocab&#34;&gt;Digraph&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We should end up back where we started. Let&amp;rsquo;s test this.&lt;/p&gt;
&lt;p&gt;Get a piece of paper. Divide it up into boxes like this:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Exercise_setup.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll fill in the top row first.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Start&lt;/strong&gt; box, draw a &lt;span class=&#34;introvocab&#34;&gt;Digraph&lt;/span&gt;. Any digraph you want! For example, you could draw a bit of your family tree, or a love triangle you came up with. For my technique to work, I&amp;rsquo;ll request that you meet these &lt;span class=&#34;introvocab&#34;&gt;conditions&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All your nodes have different labels.&lt;/li&gt;
&lt;li&gt;None of your nodes overlap, or cover each other entirely.&lt;/li&gt;
&lt;li&gt;You draw at most one arrow from any start node to any end node.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(That last condition means that 🅐⇉🅑 isn&amp;rsquo;t allowed, but 🅐⇋🅑 is.)&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve drawn your digraph, convert it to a &lt;span class=&#34;introvocab&#34;&gt;2D Plot&lt;/span&gt; in the &lt;strong&gt;Middle&lt;/strong&gt; box, like this:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Start&lt;/b&gt;
    &lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Middle&lt;/b&gt;
        &lt;table class=&#34;twodplot&#34;&gt;
            &lt;tbody&gt;
                &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                    &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;   
                &lt;tr&gt;
                    &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;person&lt;/th&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, fold your paper over so that you CAN&amp;rsquo;T SEE the digraph you started from. (If you&amp;rsquo;re following along with a friend, trade papers with them at this point.)&lt;/p&gt;
&lt;p&gt;Now, convert the 2D plot in your &lt;strong&gt;Middle&lt;/strong&gt; box back to a digraph in your &lt;strong&gt;End&lt;/strong&gt; box. Try drawing the nodes in different places :)&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
    &lt;div class=&#34;inner-column&#34;&gt;
        &lt;b&gt;Middle&lt;/b&gt;
        &lt;table class=&#34;twodplot&#34;&gt;
            &lt;tbody&gt;
                &lt;tr&gt;&lt;th rowspan=&#34;3&#34; class=&#34;right&#34;&gt;likes&lt;/th&gt;
                    &lt;th class=&#34;right&#34;&gt;A&lt;/th&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                    &lt;th class=&#34;right&#34;&gt;B&lt;/th&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;   
                &lt;tr&gt;
                    &lt;th class=&#34;right&#34;&gt;C&lt;/th&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                        &lt;td class=&#34;selected&#34;&gt;&lt;div class=&#34;square&#34;&gt;X&lt;/div&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;div class=&#34;square&#34;&gt;&lt;/div&gt;&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34;&gt;A&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;B&lt;/th&gt;&lt;th class=&#34;left&#34;&gt;C&lt;/th&gt;&lt;/tr&gt;
                &lt;tr&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;td class=&#34;absent&#34;&gt;&lt;/td&gt;&lt;th class=&#34;left&#34; colspan=&#34;3&#34;&gt;person&lt;/th&gt;&lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
    &lt;div class=&#34;inner-column&#34;&gt;
        &lt;b&gt;End&lt;/b&gt;
        &lt;img alt=&#34;TODO&#34; src=&#34;assets/Pining_Legend_Mutant.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unfold your paper. Now, we can check if the starting digraph is the same as the ending digraph&amp;ndash; oh, wait!&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an important rule I haven&amp;rsquo;t explained yet.&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Digraphs are stretchy.&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This means that no matter how we stretch and rearrange a digraph, as long as we don&amp;rsquo;t add or break any edges, it will still be considered &amp;ldquo;the same digraph&amp;rdquo;. So, for example, all of these would be considered &amp;ldquo;the same&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Same.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Keeping in mind&lt;/em&gt; that this is what &amp;ldquo;the same&amp;rdquo; means for digraphs, check if your &lt;strong&gt;Start&lt;/strong&gt; and &lt;strong&gt;End&lt;/strong&gt; boxes are the same.&lt;/p&gt;
&lt;details class=&#34;little&#34;&gt;
&lt;summary&gt;If they are the same, click here:&lt;/summary&gt;
&lt;p&gt;Great. You&amp;rsquo;ve completed the exercise.&lt;/p&gt;
&lt;p&gt;This might feel a little anticlimactic. What, we&amp;rsquo;re just back where we started? What was the point of this?&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s how &lt;em&gt;you&lt;/em&gt; feel. Me, I&amp;rsquo;m wiping sweat off my brow. See, I made kinda a big promise back there. I told you that my procedure would work, &lt;em&gt;no matter what&lt;/em&gt; digraph you chose. Lucky me, you picked one where it seems to have worked. If you could find one where it didn&amp;rsquo;t work, you would have officially PROVEN ME WRONG.&lt;/p&gt;
&lt;p&gt;Specifically, you&amp;rsquo;d have found a COUNTEREXAMPLE to my claim that my procedure would work for any input. Counterexamples are a time-honored technique for proving over-broad claims wrong. For example:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Plato:&lt;/b&gt; Any featherless biped &lt;i&gt;must&lt;/i&gt; be a man.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;p&gt;&lt;b&gt;Diogenes (holding up a plucked chicken):&lt;/b&gt; Behold a man!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In modern times, finding a counterexample to somebody&amp;rsquo;s claim means you get to publish a paper making fun of them.&lt;/p&gt;
&lt;/details&gt;
&lt;details class=&#34;little&#34;&gt;
&lt;summary&gt;If they aren&#39;t the same, click here:&lt;/summary&gt;
&lt;p&gt;There are two possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An error happened somewhere.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m wrong, and you&amp;rsquo;ve found a counterexample.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, we should check for errors. Go over each edge in the &lt;strong&gt;Start&lt;/strong&gt; box, make sure it&amp;rsquo;s recorded as a black square in the &lt;strong&gt;Middle&lt;/strong&gt; box, and turned back into an edge in the &lt;strong&gt;End&lt;/strong&gt; box. You might also want to check that none of the squares in the &lt;strong&gt;Middle&lt;/strong&gt; box got filled in black when they shouldn&amp;rsquo;t have been.&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t find any errors, you may have found a genuine counterexample. Please cite me in your refutation paper.&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&#34;drawing-exercise-2&#34;&gt;Drawing Exercise 2&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ve just converted a digraph to a 2D plot and back. Can we convert a digraph to a table and back?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try this in the next row. This time, let me pick our starting diagram. Draw this in the &lt;strong&gt;Start&lt;/strong&gt; box:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Start&lt;/b&gt;
    &lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, convert this to a Table in the &lt;strong&gt;Middle&lt;/strong&gt; box.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Hmm. Wait a minute. What table should we draw here?&lt;/p&gt;
&lt;p&gt;Come up with &lt;em&gt;something&lt;/em&gt; and we can compare notes in a sec.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Here are some ideas I came up with:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;div class=&#34;inner-column&#34;&gt;
&lt;b&gt;Idea 1&lt;/b&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Idea 2&lt;/b&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Idea 3&lt;/b&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The problem is that C doesn&amp;rsquo;t have any edges, so it&amp;rsquo;s not exactly clear how we should record it in the table.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve come to a &lt;strong&gt;design decision&lt;/strong&gt;. Let&amp;rsquo;s consider our options.&lt;/p&gt;
&lt;p&gt;I think &lt;strong&gt;Idea 1&lt;/strong&gt; is definitely wrong. It&amp;rsquo;s missing information &amp;ndash; if we picked it, our exercise could end up like this:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Legend.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;div class=&#34;center-sequence-fence-post&#34;&gt;↦&lt;/div&gt;
    &lt;img alt=&#34;TODO&#34; src=&#34;assets/Comedy_Bug.svg&#34; class=&#34;opaque&#34; width=&#34;250pt&#34; height=&#34;250pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Because the table is missing information, we don&amp;rsquo;t end up back where we started.&lt;/p&gt;
&lt;p&gt;Of the other two&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Idea 2&lt;/b&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;inner-column&#34;&gt;
    &lt;b&gt;Idea 3&lt;/b&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I think I like &lt;strong&gt;Idea 3&lt;/strong&gt; the most:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Idea 2&lt;/strong&gt; says &amp;ldquo;C doesn&amp;rsquo;t like anybody&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Idea 3&lt;/strong&gt; says &amp;ldquo;C doesn&amp;rsquo;t like anybody, and nobody likes C&amp;rdquo;,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which is more information. Sorry C.&lt;/p&gt;
&lt;p&gt;Are there other options? Well, yes. There is actually a &lt;strong&gt;Standard Math Answer&lt;/strong&gt; to this question. It might seem a little odd at first. Here&amp;rsquo;s what a mathematician would draw:&lt;/p&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;person: People&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;likes: People&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;People&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;B&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve split our information into TWO tables. One table lists the nodes (People), and the other lists the edges.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;strong&gt;person: People&lt;/strong&gt;&amp;rdquo; means that every entry in the column &amp;ldquo;&lt;strong&gt;person&lt;/strong&gt;&amp;rdquo; has to come from the table &amp;ldquo;&lt;strong&gt;People&lt;/strong&gt;&amp;rdquo;. You can also say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;each person is in the set People&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;each person is of type People&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This will sound familiar to programmers.)&lt;/p&gt;
&lt;p&gt;We can remix our other running example to show off the same idea:&lt;/p&gt;
&lt;div class=&#34;center-sequence-column&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Classes_Barbells_Gym.svg&#34; class=&#34;opaque&#34; width=&#34;550pt&#34;&gt;
&lt;div class=&#34;center-sequence-column-fence-post&#34;&gt;↦&lt;/div&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;class: Classes&lt;/th&gt;&lt;th class=&#34;right&#34;&gt;book: Books&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;center-sequence&#34;&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;Classes&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;English Lit 101&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Whaling 101&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Gym Class&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;table class=&#34;diagramtable&#34;&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th class=&#34;left&#34;&gt;Books&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;Hamlet&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Moby Dick&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!--(Notice how the columns have DIFFERENT types in this example. The Books table seems kinda redundant here, but that redundancy will turn out to be useful later.)--&gt;  
&lt;p&gt;Okay, we still need to finish our exercise. What do we put in the Middle box? You actually have a choice here: &lt;strong&gt;Idea 3&lt;/strong&gt; and the &lt;strong&gt;Standard Math Answer&lt;/strong&gt; will work equally well. Which one you pick comes down to personal preference and who you hang out with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mathematicians usually pick the &lt;strong&gt;Standard Math Answer&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Database programmers use &lt;strong&gt;Idea 3&lt;/strong&gt;. They call it an &lt;strong&gt;OUTER JOIN&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(In capital letters. Database programming started in the 70s, when capital letters were still cool.)&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve made your choice, finish the exercise like last time. Did you end up back where you started?&lt;/p&gt;
&lt;!-- (Remark: the real world isn&#39;t neatly divided into &#34;types&#34;. They&#39;re just an organizational tool.) --&gt;
&lt;/details&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now maybe you are starting to be convinced that these:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img src=&#34;assets/Three_Diagrams.svg&#34; width=&#34;600pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Are the same. Hooray?&lt;/p&gt;
&lt;p&gt;Still, you might be wondering: &lt;em&gt;why are they the same, really&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;If you did the exercises, you know that &lt;em&gt;digraphs are stretchy&lt;/em&gt;. This means that no matter how we stretch and rearrange a digraph, as long as we don&amp;rsquo;t add or break any edges, it will still be considered &amp;ldquo;the same digraph&amp;rdquo;. So, for example, all of these would be considered &amp;ldquo;the same&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;TODO&#34; src=&#34;assets/Three_Same.svg&#34; width=&#34;500pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;Once you accept that these are the same, it&amp;rsquo;s not too hard to see how to convert between all of our diagram types.&lt;/p&gt;
&lt;p&gt;Here, let me show you:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img src=&#34;assets/Three_Diagrams_Detailed.svg&#34; width=&#34;700pt&#34;&gt;
&lt;/div&gt;
&lt;p&gt;The tildes (~) mean &amp;ldquo;is like&amp;rdquo;, which is pretty vague, so I hope you can see what I mean. The ellipsis (&amp;hellip;)
is because there&amp;rsquo;s some disagreement about how to put disconnected nodes in a table. (There&amp;rsquo;s more on that in the exercises.)&lt;/p&gt;
&lt;p&gt;I think the strangest part of this diagram is the transformation on the left side &amp;ndash; modifying a graph by duplicating nodes.
Once you accept that part, the rest is pretty straightforward.&lt;/p&gt;
&lt;p&gt;John Von Neumann once said: &amp;ldquo;Young man, in mathematics you don&amp;rsquo;t understand things. You just get used to them.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll leave you with a parting&lt;/p&gt;
&lt;h2 id=&#34;exercise&#34;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Get a piece of paper. Draw a 2-column table. Rather than trying to come up with a situation, just name the columns &amp;ldquo;a&amp;rdquo; and &amp;ldquo;b&amp;rdquo;, and fill the table with random numbers and letters. Not too many of them, or you&amp;rsquo;ll be here all day.&lt;/p&gt;
&lt;p&gt;Aren&amp;rsquo;t you curious what digraph you&amp;rsquo;ve created? Convert your table to a digraph &amp;ndash; watch it unfold. Try rearranging the nodes to see other forms it might take.&lt;/p&gt;
&lt;p&gt;Also, try drawing it as a 2D plot. Honestly, this will probably just look like TV static, but it&amp;rsquo;s good to practice.&lt;/p&gt;
&lt;h2 id=&#34;further-links&#34;&gt;Further links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;../equality-and-stretchiness&#34;&gt;The next post in this series&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;../three-ways-to-draw-tables-bonus&#34;&gt;A page about tables with THREE columns&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>The Only Algorithm for Hard Problems: Shake and Pull Gently</title>
      <link>https://kazimuth.github.io/blog/post/shake-and-pull-gently/</link>
      <pubDate>Fri, 01 Jul 2022 18:14:54 -0400</pubDate>
      
      <guid>https://kazimuth.github.io/blog/post/shake-and-pull-gently/</guid>
      
      <description>&lt;p&gt;&lt;strong&gt;(Or, &amp;ldquo;regularized greedy algorithms and their applications.&amp;rdquo;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;James Gilles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Algorithm&amp;rdquo; is one of those words that sounds fancier than it really deserves. We hear all the time about the &amp;ldquo;facebook algorithm&amp;rdquo;, the &amp;ldquo;youtube algorithm&amp;rdquo;, &amp;ldquo;high frequency trading algorithms&amp;rdquo;, &amp;ldquo;artificial intelligence algorithms&amp;rdquo;, and so on. What are these, really?&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;facebook algorithm&amp;rdquo; is a large blob of software that Facebook uses to try to get people to stay on their website longer. It&amp;rsquo;s a complicated and expensive machine designed to extract user data and sell ads. All the social media &amp;ldquo;algorithms&amp;rdquo; boil down to that. Money making machines, based on a lot of loose guesses and elbow grease.&lt;/p&gt;
&lt;p&gt;A broader meaning of &amp;ldquo;algorithm&amp;rdquo; is &amp;ldquo;detailed strategy to accomplish something.&amp;rdquo; There&amp;rsquo;s a whole field of study dedicated to analyzing such things mathematically (computer science), but you don&amp;rsquo;t have to learn math to study them. In fact, they abound in everyday life. Everybody&amp;rsquo;s got their own collection of algorithms. How do you crack your eggs, sort your books, tie your shoelaces?&lt;/p&gt;
&lt;p&gt;I recently came across a particularly lovely everyday algorithm. &lt;a href=&#34;https://www.youtube.com/watch?v=Lq-Y7crQo44&#34;&gt;This youtube video&lt;/a&gt; gives the following strategy for untangling headphone wires:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    Shake and pull gently.
&lt;/div&gt;
&lt;p&gt;You might not believe that this works, so here&amp;rsquo;s a video of me trying it:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/correct.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;Like magic, they unfurl.
There is some care involved, though. If you pull too hard, you can knot them up worse:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/pull.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;And if you shake without pulling, you won&amp;rsquo;t accomplish much:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
    &lt;video width=&#34;320&#34; height=&#34;240&#34; controls async&gt;
        &lt;source src=&#34;assets/shake.mp4&#34; type=&#34;video/mp4&#34;&gt;
    &lt;/video&gt;
&lt;/div&gt;
&lt;p&gt;But when you do both at the same time, in the right ratio, it works surprisingly well. What&amp;rsquo;s going on here? How can such a simple approach yield such good results?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s study the ingredients. What does the pulling do? I would say that the pulling &lt;em&gt;encourages the system to stretch out&lt;/em&gt;. (By &amp;ldquo;system&amp;rdquo; I just mean &amp;ldquo;headphones&amp;rdquo;.)&lt;/p&gt;
&lt;p&gt;What does this have to do with untangling? Well, tangles keep the system from stretching out fully. For the system to be as stretched out as you can get, you need to get rid of the tangles. But we can&amp;rsquo;t be too direct about it. Simply pulling on the wires knots them into a tight ball, and we get stuck.&lt;/p&gt;
&lt;p&gt;How do we avoid getting knotted up? Shaking as we pull does something interesting. It encourages the system to explore more possibilities, by giving the wires motion and energy &amp;ndash; lives of their own. Lively wires are less inclined to get knotted up. I think of them as being &lt;em&gt;slipperier&lt;/em&gt; or &lt;em&gt;blurrier&lt;/em&gt;. In a thermodynamic sense, you could say that they&amp;rsquo;re &lt;em&gt;hotter&lt;/em&gt; &amp;ndash; that is, they have a lot of diffuse kinetic energy &amp;ndash; that is, they&amp;rsquo;re wiggling around.&lt;/p&gt;
&lt;p&gt;Each second, each wiggling wire explores many different configurations. Where two motionless wires tend to get knotted up, two moving wires are more likely to find a configuration that allows them to slip past each other. This added flexibility allows the system to slip past sticking points, on its way to being fully stretched out.&lt;/p&gt;
&lt;p&gt;Interesting enough. So what?&lt;/p&gt;
&lt;p&gt;This idea &amp;ndash; gently pulling a system in some direction, while adding in random shaking or smoothing &amp;ndash; actually underlies many computer algorithms as well. That video I linked earlier does a great job of explaining this metaphor for one particular problem. But it&amp;rsquo;s actually really broadly applicable, and I wanted to riff on it a while.&lt;/p&gt;
&lt;p&gt;In particular, it&amp;rsquo;s broadly applicable to algorithms that solve &amp;ldquo;hard&amp;rdquo; problems. What does &amp;ldquo;hard&amp;rdquo; mean? Computer science has many different mathematical models for studying and comparing computations &amp;ndash; asking questions like, &amp;ldquo;if you increase the amount of input data, how much more time do you need to solve it?&amp;rdquo; For easy problems, you don&amp;rsquo;t need much extra time; for hard problems, you need lots of extra time.&lt;/p&gt;
&lt;p&gt;Some examples of easy problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sorting lists of numbers&lt;/li&gt;
&lt;li&gt;Searching through sorted tables of data&lt;/li&gt;
&lt;li&gt;Finding paths through road maps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some examples of hard problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Laying out circuits to minimize production costs&lt;/li&gt;
&lt;li&gt;Training neural networks (&amp;ldquo;AIs&amp;rdquo;) to recognize images&lt;/li&gt;
&lt;li&gt;Solving logic puzzles with thousands of variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ignoring the mathematical models, my rough rule of thumb is that &amp;ldquo;easy&amp;rdquo; problems generally take a fraction of a second on a modern computer, where &amp;ldquo;hard&amp;rdquo; problems take hours or days. But there are more differences than mere time and space.&lt;/p&gt;
&lt;p&gt;See, you start your computer science degree with an Algorithms 101 class, which is about techniques for solving easy problems. These techniques have a generally &lt;em&gt;reductionist&lt;/em&gt; flavor. Given a problem, you break the problem into parts, solve each part separately, and then combine the solutions.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_sort&#34;&gt;Merge sort&lt;/a&gt; comes to mind:&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;merge sort diagram&#34; src=&#34;assets/mergesort.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;The basic idea is that you can combine two sorted lists of numbers by comparing the elements at the front and pulling off the smaller one. This gives you a sorted list of all the elements in both lists. This algorithm is called &amp;ldquo;merge&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;But if we start with an entirely unsorted list, how can we find sorted lists? Simple, break it into single elements, which are &amp;ldquo;sorted&amp;rdquo;, and then repeatedly apply &amp;ldquo;merge&amp;rdquo; to build up bigger and bigger runs of sorted numbers.)&lt;/p&gt;
&lt;p&gt;I find understanding this sort of algorithm very satisfying. It gives me a feeling of power, like I&amp;rsquo;m designing a factory production line, and know precisely what each machine involved has to do.&lt;/p&gt;
&lt;p&gt;But when you get out of algorithms 101, you quickly run into problems where this sort of approach isn&amp;rsquo;t possible. These problems are more than the sums of their parts &amp;ndash; different parts of the system interact with each other, and you can&amp;rsquo;t study them in isolation anymore.&lt;/p&gt;
&lt;p&gt;For example, laying out circuits. For very complicated circuits like CPUs, engineers don&amp;rsquo;t typically start by designing a physical layout of the circuit. Instead, they just specify components and their connections by name; component A links to component B which links to component D, there is a batch of component E&amp;rsquo;s connected to each other in a daisy chain, etc. (This is usually done in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardware_description_language&#34;&gt;hardware description language&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The problem is to pick locations for components, and then connect them with wiring, while minimizing how much space the wiring takes up (since circuit space is expensive.) This is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Place_and_route&#34;&gt;Place and Route&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But this sort of problem isn&amp;rsquo;t amenable to reductionist solutions. You can&amp;rsquo;t divide the circuit into chunks, lay them out in efficient ways indidually, and then link them together &amp;ndash; because the cross links take up space too, but you might not have left room for them! Maybe you bump some of your old links out of the way &amp;ndash; but oops, now they&amp;rsquo;re intruding on space that was used for something else! And so on.&lt;/p&gt;
&lt;p&gt;You can&amp;rsquo;t solve the problem in parts; you have to solve it &lt;em&gt;all at once&lt;/em&gt;, because its parts are all tangled up. But how can we possibly do such a thing?&lt;/p&gt;
&lt;p&gt;The answer, of course, is &amp;ldquo;shake and pull gently&amp;rdquo;. You start by making a very bad layout that takes up way, way more space than it needs; this is relatively easy to do. Then, you randomly wiggle the wires of your design, while pulling them tight to take up less space. You do this for a while, slowly decreasing your wiggling and increasing your pulling, and you stop when the circuit is small enough to satisfy you.&lt;/p&gt;
&lt;p&gt;This algorithm is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Simulated_annealing&#34;&gt;simulated annealing&lt;/a&gt;. Here&amp;rsquo;s a graphic of it; in this case it&amp;rsquo;s trying to find the shortest path through all the dots that goes through each dot exactly once:&#39;&lt;/p&gt;
&lt;div class=&#34;centerer&#34;&gt;
&lt;img alt=&#34;gif of traveling salesman problem being solved with simulated annealing&#34; src=&#34;assets/TSPSA.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;You may notice that this example is not moving smoothly, like headphone wires, but instead is proceeding in discrete jumps. Simulated annealing for circuits is similar: Circuit wires are often constrained to be laid out on a grid, and can&amp;rsquo;t move smoothly. So instead, you apply small random jumps, moving bits of wire from one grid corner to another. This acts as &amp;ldquo;shaking&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Also, before you do any jump, you ask: will this improve or worsen the cost of the the chip? If the answer is &amp;ldquo;improve&amp;rdquo;, you do the jump; but if the answer is &amp;ldquo;worsen&amp;rdquo;, you don&amp;rsquo;t always reject it. Instead, you flip a coin. On heads, you do the jump anyway. That is, you sometimes accept &amp;ldquo;bad&amp;rdquo; random jumps, which make the chip more expensive.&lt;/p&gt;
&lt;p&gt;This might seem counter-productive, but it&amp;rsquo;s how we implement &amp;ldquo;shake and pull gently&amp;rdquo; in a non-bendy setting. If you never accepted bad jumps, it would be like pulling your headphone without shaking: all the &amp;ldquo;good&amp;rdquo; jumps would quickly get applied. But then there might be many more improvements available, just not immediately.&lt;/p&gt;
&lt;p&gt;Accepting bad random jumps encourages the system to explore many more possibilities. But we&amp;rsquo;re still weighting the dice, so to speak; good jumps are more likely to be applied than bad. So the system tends to drift in a good &amp;ndash; less expensive &amp;ndash; direction.&lt;/p&gt;
&lt;p&gt;The algorithm is called &amp;ldquo;simulated annealing&amp;rdquo; because you typically start with a high bad-accept chance and then lower it over time. &amp;ldquo;Annealing&amp;rdquo; is a process where you heat slowly and cool metal to harden it. A high bad-accept chance is like a high temperature, because it induces more random motion; a low bad-accept chance is like a low temperature, because it doesn&amp;rsquo;t. By heating the system hot and slowly cooling it, you encourage it to loosen up and then slowly converge to a good solution.&lt;/p&gt;
&lt;p&gt;You might notice that this is by no means guaranteed to actually work &amp;ndash; that is, find a solution you like. It could just get stuck, spit out something worse than you put into it. This is something I was very uncomfortable with when I started studying hard problems: if there&amp;rsquo;s no guarantee it&amp;rsquo;ll work, how can you trust your algorithm?&lt;/p&gt;
&lt;p&gt;This is a general theme in hard problems. Solving them is less like designing a factory and more like baking: you have to know your ingredients well, and combine them correctly; but after a certain point, all you can do is wait and pray.&lt;/p&gt;
&lt;p&gt;Broadly speaking, there are far too many possible solutions to check if any given answer is the absolute best answer. You can only compare your solution with other, &amp;ldquo;nearby&amp;rdquo; solutions (e.g. solutions a single jump away). So instead of asking, &amp;ldquo;is this the best possible answer?&amp;rdquo;, you simply ask, &amp;ldquo;is this answer good enough?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;And in fact, in practice, the answer often is good enough. This approach is used to lay out many of the hyper-complex computer chips we use every day. And, if you squint, you can see the bones of this algorithm in many other hard problems. I&amp;rsquo;ll run through a quick battery of examples. (I&amp;rsquo;m going to skimp on intuitive explanation here, because when I tried to explain each of these in detail it added a few thousand words to the article, and nobody has time for that&amp;hellip; I&amp;rsquo;ll probably come back and talk about deep neural networks more in a later post. They&amp;rsquo;re near and dear to my heart, like a clogged artery.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deep neural networks, trained to imitate a dataset with &lt;a href=&#34;https://en.wikipedia.org/wiki/Stochastic_gradient_descent&#34;&gt;stochastic gradient descent&lt;/a&gt;: &amp;ldquo;gradient descent&amp;rdquo; involves &amp;ldquo;pulling&amp;rdquo; on the tuning parameters of a statistical model to make them approximate some dataset. &amp;ldquo;Stochastic&amp;rdquo; gradient descent involves randomly sampling sub-chunks of the dataset to approximate at a time. This random sampling acts like &amp;ldquo;shaking&amp;rdquo;, and the gradient descent part acts like &amp;ldquo;pulling&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Genetic algorithms: often used to explain deep neural networks, although they aren&amp;rsquo;t  actually used much anymore. But the analogy is close enough: genetic algorithms are like a slightly more complex version of simulated annealing, with a population of candidate solutions being randomly mutated instead of just a single one. (You could argue that biological evolution is a &amp;ldquo;shake and pull gently&amp;rdquo; algorithm, but I&amp;rsquo;m not sure I&amp;rsquo;d agree; biological evolution doesn&amp;rsquo;t actually have a goal, it&amp;rsquo;s just that whatever reproduces, reproduces, and whatever doesn&amp;rsquo;t, doesn&amp;rsquo;t&amp;hellip;)&lt;/li&gt;
&lt;li&gt;SAT / SMT solvers: Maybe calling backtracking search &amp;ldquo;shake and pull gently&amp;rdquo; is pushing it, since there isn&amp;rsquo;t any explicit randomness involved, but I think the analogy still works; you just have to view exhaustive search as a generalized form of random sampling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Actually you can &lt;a href=&#34;https://arxiv.org/abs/2109.14119&#34;&gt;do without random sampling&lt;/a&gt; in neural networks as well, but you have to add in other ingredients that approximate its smoothing effects. So what matters more than the random shaking &lt;em&gt;itself&lt;/em&gt; is how the random shaking smooths and simplifies the problem. You could call it a &amp;ldquo;good rule of thumb for making the problem more regular&amp;rdquo;; machine learning experts call such things &amp;ldquo;regularization heuristics&amp;rdquo;, because if you don&amp;rsquo;t use long words you can&amp;rsquo;t get research funding.)&lt;/p&gt;
&lt;p&gt;By the way, a &amp;ldquo;greedy algorithm&amp;rdquo; is just an algorithm that blindly makes small improvements to a solution without thinking very hard about them. The byline of this post was &amp;ldquo;regularized greedy algorithms and their applications&amp;rdquo;; now we can say what a &amp;ldquo;regularized greedy algorithm&amp;rdquo; actually is. It&amp;rsquo;s an &amp;ldquo;algorithm that blindly moves in a direction while trying not to get stuck.&amp;rdquo; Or, more simply, &amp;ldquo;pull and shake gently&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Stated so bluntly, maybe it&amp;rsquo;s obvious why such things have broad applications. Did this really deserve a whole 2000-word post? Well, here we are.&lt;/p&gt;
&lt;p&gt;I hope this helps demystify &amp;ldquo;algorithms&amp;rdquo;; whenever you see a headline about &amp;ldquo;algorithms&amp;rdquo;, there&amp;rsquo;s a good chance it boils down to &amp;ldquo;shake and pull gently&amp;rdquo;. It may be worth questioning whether we should trust &amp;ldquo;shake and pull gently&amp;rdquo; to select what news stories we read, whether we receive home loans, or whether we are drone striked as a terrorists. Especially when the &amp;ldquo;pull gently&amp;rdquo; part of the algorithm is attempting to optimize the profits of Facebook, Wells Fargo, or Raytheon, respectively.&lt;/p&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;p&gt;Postscript:&lt;/p&gt;
&lt;p&gt;It occurs to me that there&amp;rsquo;s something I oughtta admit. It actually took me a bunch of tries to get that shot of the headphones coming untied. Most of the times I tried it didn&amp;rsquo;t work, or only worked partially, leaving me with some knots to undo by hand. Even if I can describe the technique in a simple way, actually applying it takes practice and skill.&lt;/p&gt;
&lt;p&gt;That applies to all the algorithms I&amp;rsquo;ve talked about here. Neural networks, SMT solvers, Place &amp;amp; Route engines; none of these things are straightforward. The devil is in the details, and getting to know such details can be a life&amp;rsquo;s work. I don&amp;rsquo;t want to denigrate that work; just point out some shared themes.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://kazimuth.github.io/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kazimuth.github.io/blog/about/</guid>
      
      <description>&lt;p&gt;My name is James Gilles. I&amp;rsquo;m interested in data visualization and transformation, as well as compilers and program rewriting. I also enjoy math, especially lattice theory, relational algebra, geometric algebra, and higher category theory. I love teaching, but it&amp;rsquo;s a lot of work.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m looking for a PhD advisor. Here&amp;rsquo;s my &lt;a href=&#34;https://kazimuth.github.io/cv.pdf&#34;&gt;CV&lt;/a&gt; and &lt;a href=&#34;https://kazimuth.github.io/meng-thesis.pdf&#34;&gt;master&amp;rsquo;s thesis&lt;/a&gt;. I want to work on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interactive data visualization and transformation&lt;/li&gt;
&lt;li&gt;interactive program visualization and transformation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;rsquo;t want to work on machine learning, but my work would probably be useful for it.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
